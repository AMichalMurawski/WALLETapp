{"version":3,"file":"static/js/373.f667d3d6.chunk.js","mappings":"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","sources":["webpack://walletapp/./src/components/Modal/ModalAddTransaction/ModalAddTransaction.module.scss?ad48","webpack://walletapp/./src/components/Modal/ModalAddTransaction/ModalAddTransactionCheckbox.module.scss?8e24","components/Modal/ModalAddTransaction/ModalAddTransactioCheckbox.jsx","webpack://walletapp/./src/components/Modal/ModalAddTransaction/ModalAddTransactionForm.module.scss?177e","components/Modal/ModalAddTransaction/ModalAddTransactionForm.jsx","components/Modal/ModalAddTransaction/ModalAddTransaction.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ModalAddTransaction_container__RhcAj\",\"backdrop\":\"ModalAddTransaction_backdrop__7I-W7\",\"box\":\"ModalAddTransaction_box__Y41ZK\",\"title\":\"ModalAddTransaction_title__Wzy3o\",\"checkboxInfo\":\"ModalAddTransaction_checkboxInfo__UUVHb\",\"checkboxText\":\"ModalAddTransaction_checkboxText__hEFN4\",\"checkboxLabel\":\"ModalAddTransaction_checkboxLabel__e9gjX\",\"checkboxIconBox\":\"ModalAddTransaction_checkboxIconBox__VRx6X\",\"checkbox\":\"ModalAddTransaction_checkbox__bu7bN\",\"checkboxIcon\":\"ModalAddTransaction_checkboxIcon__woWDv\",\"closeBtn\":\"ModalAddTransaction_closeBtn__KUoYn\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ModalAddTransactionCheckbox_container__dHylC\",\"checkboxInfo\":\"ModalAddTransactionCheckbox_checkboxInfo__7YUnK\",\"checkboxText\":\"ModalAddTransactionCheckbox_checkboxText__rtV9u\",\"checkboxLabel\":\"ModalAddTransactionCheckbox_checkboxLabel__E-bGg\",\"checkboxIconBox\":\"ModalAddTransactionCheckbox_checkboxIconBox__ypS+1\",\"checkbox\":\"ModalAddTransactionCheckbox_checkbox__B719m\",\"checkboxIcon\":\"ModalAddTransactionCheckbox_checkboxIcon__RyBUR\"};","import { HiOutlinePlus, HiOutlineMinus } from 'react-icons/hi';\nimport s from './ModalAddTransactionCheckbox.module.scss';\nimport { useModal } from '../../../hooks';\nimport { useDispatch } from 'react-redux';\nimport { modalSpliceTransaction } from '../../../redux/modal/modalThunk';\n\nexport const ModalAddTransactionCheckbox = prop => {\n  const { modalTransaction } = useModal();\n  const dispatch = useDispatch();\n\n  const handleCheckbox = e => {\n    if (e.currentTarget.checked) {\n      dispatch(modalSpliceTransaction({ type: 'income' }));\n    } else {\n      dispatch(modalSpliceTransaction({ type: 'expense' }));\n    }\n  };\n\n  return (\n    <div className={s.checkboxInfo}>\n      <span\n        className={s.checkboxText}\n        style={\n          modalTransaction.type === 'income'\n            ? { color: '#24CCA7' }\n            : { color: '#e0e0e0' }\n        }\n      >\n        Income\n      </span>\n      <label className={s.checkboxLabel}>\n        <input\n          className={s.checkbox}\n          type=\"checkbox\"\n          onClick={handleCheckbox}\n        />\n        <div className={s.checkboxIconBox}>\n          {modalTransaction.type === 'expense' ? (\n            <HiOutlinePlus className={s.checkboxIcon} />\n          ) : (\n            <HiOutlineMinus className={s.checkboxIcon} />\n          )}\n        </div>\n      </label>\n      <span\n        className={s.checkboxText}\n        style={\n          modalTransaction.type === 'expense'\n            ? { color: '#FF6596' }\n            : { color: '#e0e0e0  ' }\n        }\n      >\n        Expense\n      </span>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ModalAddTransactionForm_container__X9qf-\",\"addBtn\":\"ModalAddTransactionForm_addBtn__HbASK\",\"active\":\"ModalAddTransactionForm_active__tU4fd\",\"addFormInputCategory\":\"ModalAddTransactionForm_addFormInputCategory__Me5TS\",\"menu\":\"ModalAddTransactionForm_menu__3jxeP\",\"menuItem\":\"ModalAddTransactionForm_menuItem__TD2E1\",\"addForm\":\"ModalAddTransactionForm_addForm__1TgEn\",\"addFormInputContainer\":\"ModalAddTransactionForm_addFormInputContainer__Ht-ZE\",\"categoryLabel\":\"ModalAddTransactionForm_categoryLabel__FkoAD\",\"scaleTitle\":\"ModalAddTransactionForm_scaleTitle__ZKcyD\",\"openMenuBtn\":\"ModalAddTransactionForm_openMenuBtn__r3EwL\",\"openMenuBtnIcon\":\"ModalAddTransactionForm_openMenuBtnIcon__z6FU7\",\"sumBox\":\"ModalAddTransactionForm_sumBox__o+PZv\",\"addFormInputSum\":\"ModalAddTransactionForm_addFormInputSum__mNTk+\",\"dateBox\":\"ModalAddTransactionForm_dateBox__L6Wbi\",\"addFormInputDate\":\"ModalAddTransactionForm_addFormInputDate__+vYqQ\",\"dataBtn\":\"ModalAddTransactionForm_dataBtn__JeH-Q\",\"dataBtnIcon\":\"ModalAddTransactionForm_dataBtnIcon__9kRMN\",\"commentBox\":\"ModalAddTransactionForm_commentBox__LiUSm\",\"addFormTextarea\":\"ModalAddTransactionForm_addFormTextarea__ceN6K\",\"errorSum\":\"ModalAddTransactionForm_errorSum__GCGRW\",\"errorComment\":\"ModalAddTransactionForm_errorComment__Ryldq\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Datetime from 'react-datetime';\nimport { useEffect } from 'react';\n\nimport 'react-datetime/css/react-datetime.css';\n\nimport { RiCalendar2Line } from 'react-icons/ri';\n// import { HiOutlineChevronDown, HiOutlineChevronUp } from 'react-icons/hi';\n// import getDate from '../../../utils/getDate';\nimport scss from './ModalAddTransactionForm.module.scss';\n// import { ModalAddTransactionFormMenu } from './ModalAddTransactionFormMenu/ModalAddTransactionFormMenu';\nimport { useAuth, useModal, useWallet } from '../../../hooks';\nimport { useDispatch } from 'react-redux';\nimport {\n  addTransaction,\n  getCategories,\n} from '../../../redux/wallet/walletThunk';\nimport {\n  modalShowAddTransaction,\n  modalSpliceTransaction,\n} from '../../../redux/modal/modalThunk';\n\n// let patternTwoDigisAfterComma = /^\\d+(\\.\\d{0,2})?$/;\n\nconst initialTransaction = {\n  date: new Date().toLocaleDateString(),\n  categoryId: 99,\n  comment: '',\n  sum: 0,\n};\n\nconst schema = yup.object().shape({\n  // amount: yup\n  //   .string()\n  //   .test(val => {\n  //     if (val !== undefined) {\n  //       return patternTwoDigisAfterComma.test(val);\n  //     }\n  //     return true;\n  //   })\n  //   .min(0.01, 'Please, enter an amount min 0.01')\n  //   .max(2500000, 'Please, enter an amount max 2500000!')\n  //   .required('Amount is required'),\n\n  comment: yup\n    .string()\n    .trim()\n    .max(100, 'Maximum 100 symbols')\n    .matches(/(^[а-яА-ЯёЁa-zA-ZЇїІіЄєҐґ ]+$)/u, 'Please, enter only letters'),\n});\nconst initialValues = {\n  amount: '',\n  comment: '',\n};\n\nexport const ModalAddTransactionForm = ({ onClick }) => {\n  const { modalTransaction } = useModal();\n  const { categories, changeTransactions } = useWallet();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n\n  const today = new Date();\n  const lastYear = new Date('December 31, 2022 23:59:59');\n  const disableFutureDt = current => {\n    return current.isBefore(today) && current.isAfter(lastYear);\n  };\n\n  useEffect(() => {\n    dispatch(getCategories({ walletId: user.wallets[0].id }));\n    dispatch(modalSpliceTransaction(initialTransaction));\n  }, [dispatch, user, changeTransactions]);\n\n  const handleDate = e => {\n    dispatch(modalSpliceTransaction({ date: e._d.toLocaleDateString() }));\n  };\n\n  const handleCategoryId = e => {\n    dispatch(\n      modalSpliceTransaction({ categoryId: e.currentTarget.value.toString() })\n    );\n  };\n\n  const handleSum = e => {\n    const val = e.currentTarget.value;\n    if (val === undefined) return;\n    if (isNaN(val)) return;\n    if (Math.round(val * 100) !== val * 100) return;\n    if (val < 0) return;\n    if (val > 2500000) return;\n\n    dispatch(modalSpliceTransaction({ sum: e.currentTarget.value }));\n  };\n\n  const handleComment = e => {\n    dispatch(modalSpliceTransaction({ comment: e.currentTarget.value }));\n  };\n\n  const handleSubmit = e => {\n    console.log('submit');\n    dispatch(\n      addTransaction({\n        walletId: user.wallets[0].id,\n        transaction: modalTransaction,\n      })\n    );\n    dispatch(modalShowAddTransaction(false));\n  };\n\n  const renderCalendarInput = (props, openCalendar) => {\n    return (\n      <div className={scss.dataBox}>\n        <Field\n          {...props}\n          className={scss.addFormInputDate}\n          type=\"text\"\n          placeholder=\"date\"\n          name=\"date\"\n          autoComplete=\"off\"\n          value={modalTransaction.date}\n          readOnly\n        ></Field>\n        <button className={scss.dataBtn} type=\"button\" onClick={openCalendar}>\n          <RiCalendar2Line className={scss.dataBtnIcon}></RiCalendar2Line>\n        </button>\n      </div>\n    );\n  };\n\n  console.log(modalTransaction);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={scss.addForm}>\n        <div className={scss.addFormInputContainer}>\n          <label className={scss.categoryLabel}>\n            <Field\n              className={scss.addFormInputCategory}\n              as=\"select\"\n              placeholder=\"Select a category\"\n              name=\"category\"\n              onChange={handleCategoryId}\n            >\n              {categories.map((e, i, array) => {\n                if (e.type[0] === modalTransaction.type) {\n                  return (\n                    <option key={e.id} value={e.id}>\n                      {e.name}\n                    </option>\n                  );\n                }\n                return null;\n              })}\n            </Field>\n          </label>\n          <label className={scss.sumBox}>\n            <Field\n              className={scss.addFormInputSum}\n              type=\"text\"\n              placeholder=\"0.00\"\n              enableReinitialize={true}\n              value={modalTransaction.sum}\n              name=\"amount\"\n              // autoComplete=\"off\"\n              onChange={handleSum}\n            ></Field>\n            {/* <ErrorMessage\n              className={scss.errorMessage}\n              name=\"amount\"\n              component=\"div\"\n              render={createValidateMessageAmount}\n            ></ErrorMessage> */}\n          </label>\n          <label className={scss.dateBox}>\n            <Datetime\n              timeFormat={false}\n              renderInput={renderCalendarInput}\n              isValidDate={disableFutureDt}\n              dateFormat=\"DD.MM.YYYY\"\n              closeOnSelect={true}\n              initialValue={new Date()}\n              onChange={handleDate}\n            />\n          </label>\n          <label className={scss.commentBox}>\n            <Field\n              className={scss.addFormTextarea}\n              name=\"comment\"\n              component=\"textarea\"\n              placeholder=\"Comment\"\n              value={modalTransaction.comment}\n              onKeyPress={e => {\n                if (e.charCode === 13) {\n                  e.preventDefault();\n                }\n              }}\n              onChange={handleComment}\n            ></Field>\n            <ErrorMessage\n              className={scss.errorMessage}\n              name=\"comment\"\n              component=\"div\"\n              render={r => {\n                return <div className={scss.errorComment}>{r}</div>;\n              }}\n            ></ErrorMessage>\n          </label>\n        </div>\n        <button type=\"submit\" className={scss.addBtn}>\n          Add\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport s from './ModalAddTransaction.module.scss';\n// import { ModalUniversal } from '../ModalUniversal';\nimport { ModalAddTransactionCheckbox } from './ModalAddTransactioCheckbox';\nimport { ModalAddTransactionForm } from './ModalAddTransactionForm';\nimport {\n  modalShowAddTransaction,\n  modalShowEditTransaction,\n} from '../../../redux/modal/modalThunk';\n\nconst ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n\n  const handleCloseModal = () => {\n    dispatch(modalShowAddTransaction(false));\n    dispatch(modalShowEditTransaction(false));\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      handleCloseModal();\n    }\n  };\n\n  const escKeyDown = e => {\n    if (e.code === 'Escape') {\n      handleCloseModal();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', escKeyDown);\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.removeEventListener('keydown', escKeyDown);\n      document.body.style.overflow = '';\n    };\n  });\n\n  return (\n    <div\n      className={s.backdrop}\n      onClose={handleCloseModal}\n      onClick={handleBackdropClick}\n    >\n      <div className={s.box}>\n        <h2 className={s.title}>Add transaction</h2>\n        <ModalAddTransactionCheckbox></ModalAddTransactionCheckbox>\n        <ModalAddTransactionForm\n          onClick={handleCloseModal}\n        ></ModalAddTransactionForm>\n        <button className={s.closeBtn} type=\"button\" onClick={handleCloseModal}>\n          cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalAddTransaction;\n"],"names":["ModalAddTransactionCheckbox","prop","modalTransaction","useModal","dispatch","useDispatch","_jsxs","className","s","children","_jsx","style","type","color","onClick","e","currentTarget","checked","modalSpliceTransaction","HiOutlinePlus","HiOutlineMinus","initialTransaction","date","Date","toLocaleDateString","categoryId","comment","sum","schema","yup","shape","trim","max","matches","initialValues","amount","ModalAddTransactionForm","_ref","_useWallet","useWallet","categories","changeTransactions","user","useAuth","today","lastYear","useEffect","getCategories","walletId","wallets","id","console","log","Formik","validationSchema","onSubmit","addTransaction","transaction","modalShowAddTransaction","Form","scss","Field","as","placeholder","name","onChange","value","toString","map","i","array","enableReinitialize","val","undefined","isNaN","Math","round","Datetime","timeFormat","renderInput","props","openCalendar","_objectSpread","autoComplete","readOnly","RiCalendar2Line","isValidDate","current","isBefore","isAfter","dateFormat","closeOnSelect","initialValue","_d","component","onKeyPress","charCode","preventDefault","ErrorMessage","render","r","handleCloseModal","modalShowEditTransaction","escKeyDown","code","document","addEventListener","body","overflow","removeEventListener","onClose","target"],"sourceRoot":""}